namespace Percupuff
{
    namespace Drums
    {
        processor BassDrum {
            input event (std::notes::NoteOn) eventIn;
            output stream float out;
            
            float triggerVelocity = 0.0f;

            event eventIn(std::notes::NoteOn n) {
                if (int (n.pitch) == BASS_DRUM_MIDI_PITCH) {
                    triggerVelocity = n.velocity;
                }
            }

            node osc = OscillatorBank;
            node envelope = Envelope;
            node envelope2 = Envelope;
            node carrier = Oscillator;
            node modulator = Oscillator;
            
            Lpf lpf = (0.0f, 0.0f);

            void main()
            {
                // @todo: make param or constant
                let baseFrequency = 49.0f;

                osc.frequencyIn <- float<8>(
                    50,
                    93,
                    136,
                    182,
                    225,
                    273,
                    73,
                    60
                );

                osc.levelIn <- float<8>(
                    2.0f,
                    0.5f,
                    0.4f,
                    0.3f,
                    0.2f,
                    0.2f,
                    1.0f,
                    1.0f
                );

                envelope.releaseIn <- .25f;
                envelope2.releaseIn <- .05f;

                carrier.frequencyIn <- 500.0f;
                modulator.frequencyIn <- 166.0f;

                let referenceSampleRate = 44100.0f;
                let fmAdjust = (referenceSampleRate / float(processor.frequency));

                loop
                {
                    while (triggerVelocity == 0) {
                        advance();
                    }

                    let vel = triggerVelocity;
                    triggerVelocity = 0.0f;

                    envelope.triggerIn <- void;
                    envelope2.triggerIn <- void;

                    envelope.advance();
                    envelope2.advance();
                    float gain = envelope.gainOut;

                    while (gain > 0.0f && triggerVelocity == 0.0f) {
                        modulator.frequencyModIn <- gain * 0.01f * fmAdjust;
                        let mod = modulator.out;
                        modulator.advance();

                        carrier.frequencyModIn <- mod;
                        let car = carrier.out;
                        carrier.advance();

                        float lpSample = lpf.getSample(car, 1200.0f + 3500.0f * envelope2.gainOut, float(processor.frequency));

                        osc.frequencyModIn <- gain * 0.01f * fmAdjust;
                        osc.advance();
                        out <- (sin(osc.out * (.01f + 1.5f * vel)) + lpSample * 0.17f) * gain;
                        // out <- sin(osc.out * 2.0f) * gain;
                        
                        gain = envelope.gainOut;
                        envelope.advance();
                        envelope2.advance();
                   

                        advance();
                    }
                }
            }
        }
    }
}