// sound inspired by https://www.youtube.com/watch?v=cs9wltg-Nmo

namespace Percupuff
{
    namespace Drums
    {
        processor SideStick {
            input event (std::notes::NoteOn) eventIn;
            input stream float noiseIn;
            output stream float<2> out;
            input event Params paramsIn;
            
            float triggerVelocity = 0.0f;
            int midiNotePitch = 0;
            float outputLevel = 0.5f;
            float panning = 0.0f;

            float velocitySensitivity = 1.0f;

            event paramsIn(Params p) {
                midiNotePitch = int(p.sideStickMidi);
                outputLevel = p.sideStickLevel * 0.01f;
                panning = p.sideStickPanning;
                velocitySensitivity = p.sideStickVelocity;
            }

            event eventIn(std::notes::NoteOn n) {
                if (int (n.pitch) == midiNotePitch) {
                    triggerVelocity = sqrt(n.velocity);
                }
            }

            node envelope = Envelope;
            node osc1 = Oscillator(OscillatorShape::triangle);

            node clickEnvelope = Envelope;
            const float highPassCutoff = 7800.0f;
            node highpass = std::filters::butterworth::Processor(
                std::filters::butterworth::Mode::highPass, highPassCutoff
            );
            LpfResonant lowpass = (0.0f, 0.0f);

            void main()
            {
                envelope.attackIn <- .001f;
                osc1.frequencyIn <- 120.0f;
                clickEnvelope.attackIn <- .2f;

                let invSampleRate = 1.0f / float(processor.frequency);
                
                loop
                {
                    while (triggerVelocity == 0) {
                        advance();
                    }

                    let vel = triggerVelocity;
                    triggerVelocity = 0.0f;

                    envelope.releaseIn <- .05f + vel * 0.08f; // short release
                    envelope.triggerIn <- void;
                    // adding this envelope for click gain which makes it sound less like clicking 2 wood blocks together (?)
                    clickEnvelope.releaseIn <- .15f;
                    envelope.advance();
                    clickEnvelope.advance();
                    float gain = envelope.gainOut;
                    float clickGain = clickEnvelope.gainOut;
                    while (gain > 0.0f && triggerVelocity == 0.0f) {
                        // Removes frequencies below highPassCutoff.
                        osc1.frequencyModIn <- gain * 0.15f;
                        highpass.in <- osc1.out;
                        float lpSample = lowpass.getSample(highpass.out, 14000.0f, 0.7f, invSampleRate);

                        let outSample = (sin((osc1.out) + (highpass.out * clickGain) + lpSample)) * gain * 0.5f * vel * outputLevel;
                        float pan = panning * 0.01f;
                        float leftGain  = 0.5f * (1.0f - pan);
                        float rightGain = 0.5f * (1.0f + pan);
                        out <- (outSample * leftGain, outSample * rightGain);

                        osc1.advance();
                        
                        gain = envelope.gainOut;
                        envelope.advance();
                        clickEnvelope.advance();
                        highpass.advance();
                        advance();
                    }
                }
            }
        }
    }
}
