// sound inspired by https://www.youtube.com/watch?v=cs9wltg-Nmo

namespace Percupuff
{
    namespace Drums
    {
        // This processor tries to create a realistic side stick sound.
        // Additive synthesis is used to create the initial impact of the stick on the rim of the snare,
        // with filtered white noise mixed in for more brightness.
        processor SideStick {
            input event (std::notes::NoteOn) eventIn;
            input event Params paramsIn;
            input stream float noiseIn;
            output stream float<2> out;
            
            float triggerVelocity = 0.0f;
            int midiNotePitch = 0;
            float outputLevel = 0.5f;
            float panning = 0.0f;

            event paramsIn(Params p) {
                midiNotePitch = int(p.sideStickMidi);
                outputLevel = p.sideStickLevel * 0.01f;
                panning = p.sideStickPanning;
            }

            event eventIn(std::notes::NoteOn n) {
                if (int (n.pitch) == midiNotePitch) {
                    triggerVelocity = sqrt(n.velocity);
                }
            }

            node envelope = Envelope;
            node osc = OscillatorBank(OscillatorShape::triangle);

            // Filters that shape the white noise.
            Lpf lpf = (0.0f, 0.0f);
            NotchFilter notch;

            void main()
            {
                envelope.releaseIn <- .25f;

                osc.frequencyIn <- float<8>(
                    676.0f,
                    724.0f,
                    987.0f,
                    1030.0f,
                    1170.0f,
                    1224.0f,
                    1380.0f,
                    1436.0f
                );

                osc.levelIn <- float<8>(
                    0.8f,
                    0.7f,
                    0.6f,
                    0.9f,
                    0.9f,
                    0.4f,
                    0.3f,
                    0.2f
                );

                let invSampleRate = 1.0f / float(processor.frequency);
                notch.setCoefficients(8000.0f, 0.9f, float(processor.frequency));

                loop
                {
                    while (triggerVelocity == 0) {
                        advance();
                    }

                    let vel = triggerVelocity;
                    triggerVelocity = 0.0f;
                    envelope.triggerIn <- void;
                    envelope.advance();
                    float gain = envelope.gainOut;

                    while (gain > 0.0f && triggerVelocity == 0.0f) {
                        osc.frequencyModIn <- gain * 0.01f;

                        float lpSample = lpf.getSample(noiseIn, 4000.0f + vel * 10000.0f, invSampleRate);
                        float filteredLpSample = notch.getSample(lpSample);

                        let outSample = ((sin(osc.out * (1.0f + vel * 0.5f)) + filteredLpSample * 0.4f) * gain * (0.5f + vel * 0.5f)) * outputLevel;

                        float pan = panning * 0.01f;
                        float leftGain  = 0.5f * (1.0f - pan);
                        float rightGain = 0.5f * (1.0f + pan);
                        out <- (outSample * leftGain, outSample * rightGain);

                        osc.advance();
                        
                        gain = envelope.gainOut;
                        envelope.advance();
                        advance();
                    }
                }
            }
        }
    }
}