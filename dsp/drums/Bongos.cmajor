namespace Percupuff
{
    namespace Drums
    {
        // @todo: lots of problems and sample rate dependent
        processor Bongos {
            input event std::notes::NoteOn eventIn;
            output stream float out;

            const float64 fs = processor.frequency;
            float64 b0, b1, a1, a2;

            float64 y1 = 0.0f, y2 = 0.0f;

            float64 triggerVelocity = 0.0f;
            float64 velocity = 0.0f;
            float64 gain = 0.0f;

            std::random::RNG rng;
            
            event eventIn(std::notes::NoteOn n) {
                if (int(n.pitch) == HIGH_BONGO_MIDI_PITCH) {
                    triggerVelocity = n.velocity;
                    envelope.attackIn <- 0.001f;
                    envelope.releaseIn <- .2f;
                    setFrequency(650.0f, 50.0f);
                    y1 = 0.0f;
                    y2 = 0.0f;
                    rng.seed(1999);
                }
                if (int(n.pitch) == LOW_BONGO_MIDI_PITCH) {
                    triggerVelocity = n.velocity;
                    envelope.attackIn <- 0.001f;
                    envelope.releaseIn <- .2f;
                    setFrequency(480.0f, 50.0f);
                    y1 = 0.0f;
                    y2 = 0.0f;
                    rng.seed(1999);
                }
            }

            void init() {
                setFrequency(2300.0f, 50.0f);
            }

            void setFrequency(float64 f, float64 q) {
                float64 omega_0 = f * 2.0f * pi;

                float64 alpha = sin(omega_0 / fs) / (2.0f * q);
                float64 cosw0 = cos(omega_0 / fs);

                b0 = alpha;
                b1 = 0.0f;
                a1 = -2.0f * cosw0;
                a2 = 1.0f - alpha;
            }

            node envelope = Envelope;

            void main()
            {
                loop
                {
                    float64 sample = 0.0f;

                    if (triggerVelocity > 0.0f)
                    {
                        velocity = triggerVelocity;
                        triggerVelocity = 0.0f;
                        envelope.triggerIn <- void;
                        envelope.advance();
                        gain = envelope.gainOut;
                    }

                    if (gain > 0.0001f)
                    {
                        float64 xn = rng.getBipolar();
                        float64 yn = b0 * xn - a1 * y1 - a2 * y2;

                        y2 = y1;
                        y1 = yn;

                        sample = yn * velocity * gain;
                        envelope.advance();
                        gain = envelope.gainOut;
                    }

                    out <- float(sample);
                    advance();
                }
            }
        }
    }
}