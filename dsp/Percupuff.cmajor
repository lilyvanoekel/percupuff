namespace Percupuff
{
    processor MultiplyStreams {
        input stream float stream1;
        input stream float stream2;
        output stream float out;

        void main() {
            loop {
                out <- stream1 * stream2;
                advance();
            }
        }
    }

    processor DivideEventBy100() {
        input event float in;
        output event float out;

        event in(float f) {
            out <- f * 0.01f;
        }
    }

    graph Percupuff  [[main]]
    {
        input event std::midi::Message midiIn;
        input p.*;
        output event (std::notes::NoteOn) noteOn;

        output stream float<2> out;

        node
        {
            p = ParamsProcessor;
            noise = std::noise::White;
            bassDrum = Drums::BassDrum;
            snare = Drums::Snare;
            hihat = Drums::Hihat;
            clap = Drums::Clap;
            cowbell = Drums::Cowbell;
            crash = Drums::Crash;
            claves = Drums::Claves;
            bongos = Drums::Bongos;
            gainLimiter = std::levels::ConstantGain (float<2>, 1.0f);
            mpe = std::midi::MPEConverter;
            levelSmoother = std::smoothing::SmoothedValueStream (0.02f);
            mul = MultiplyStreams;
        }
    
        connection
        {
            // mainLevel -> DivideEventBy100 -> levelSmoother;
            p.paramsOut -> bassDrum.paramsIn;
            p.paramsOut -> bongos.paramsIn;
            p.paramsOut -> clap.paramsIn;
            p.paramsOut -> claves.paramsIn;
            p.paramsOut -> crash.paramsIn;
            p.paramsOut -> cowbell.paramsIn;
            p.paramsOut -> hihat.paramsIn;
            p.paramsOut -> snare.paramsIn;
            midiIn -> mpe;
            mpe -> bassDrum.eventIn;
            mpe -> snare.eventIn;
            mpe -> hihat.eventIn;
            mpe -> clap.eventIn;
            mpe -> cowbell.eventIn;
            mpe -> crash.eventIn;
            mpe -> claves.eventIn;
            mpe -> bongos.eventIn;
            mpe -> noteOn;
            noise -> hihat.noiseIn;
            noise -> snare.noiseIn;
            noise -> clap.noiseIn;
            noise -> crash.noiseIn;
            noise -> claves.noiseIn;
            bassDrum -> gainLimiter;
            snare -> gainLimiter;
            hihat -> gainLimiter;
            clap -> gainLimiter;
            cowbell -> gainLimiter;
            crash -> gainLimiter;
            claves -> gainLimiter;
            bongos -> gainLimiter;
            // levelSmoother -> mul.stream1;
            // gainLimiter -> mul.stream2;
            gainLimiter -> out;
        }
    }
}
