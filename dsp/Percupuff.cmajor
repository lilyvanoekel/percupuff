namespace Percupuff
{
    // This is the main "controller" of the synthesizer, it ties everything
    // together.
    //
    // MIDI is a protocol that devices and software use to communicate "musical
    // information". It describes things like which note to start/stop playing 
    // and how hard it was pressed or hit. This is our input. In this case we
    // specifically care about when to start playing a note, and ignore when to
    // stop, as our percussive sounds are stubborn and decide that for
    // themselves.
    //
    // We also define all of our parameters from the `ParamsProcessor` as input
    // events. So we can act on them when they change.
    //
    // Our output is 2 streams of actual audio data.
    graph Percupuff  [[main]]
    {
        input event std::midi::Message midiIn;
        input p.*;

        // Send midi notes to output as well, this is needed for the function
        // that lets you reassign midi notes.
        output event (std::notes::NoteOn) noteOn;
        output stream float<2> out;

        node
        {
            p = ParamsProcessor;
            noise = std::noise::White;
            bassDrum = Drums::BassDrum;
            snare = Drums::Snare;
            hihat = Drums::Hihat;
            clap = Drums::Clap;
            cowbell = Drums::Cowbell;
            crash = Drums::Crash;
            claves = Drums::Claves;
            bongos = Drums::Bongos;
            sideStick = Drums::SideStick;
            gainLimiter = std::levels::ConstantGain (float<2>, 1.0f);
            mpe = std::midi::MPEConverter;
        }
    
        connection
        {
            // Send all of the parameters to each individual sound processor.
            p.paramsOut -> bassDrum.paramsIn;
            p.paramsOut -> bongos.paramsIn;
            p.paramsOut -> clap.paramsIn;
            p.paramsOut -> claves.paramsIn;
            p.paramsOut -> crash.paramsIn;
            p.paramsOut -> cowbell.paramsIn;
            p.paramsOut -> hihat.paramsIn;
            p.paramsOut -> snare.paramsIn;
            p.paramsOut -> sideStick.paramsIn;

            // Send the midi events so the sound processors know when to start playing.
            midiIn -> mpe;
            mpe -> bassDrum.eventIn;
            mpe -> snare.eventIn;
            mpe -> hihat.eventIn;
            mpe -> clap.eventIn;
            mpe -> cowbell.eventIn;
            mpe -> crash.eventIn;
            mpe -> claves.eventIn;
            mpe -> bongos.eventIn;
            mpe -> sideStick.eventIn;
            mpe -> noteOn;

            // Some sounds use noise.
            noise -> hihat.noiseIn;
            noise -> snare.noiseIn;
            noise -> clap.noiseIn;
            noise -> crash.noiseIn;
            noise -> claves.noiseIn;

            // Take the output from all of our sounds, mix it together and put
            // it into the gain limiter to adjust how loud they are.
            bassDrum -> gainLimiter;
            snare -> gainLimiter;
            hihat -> gainLimiter;
            clap -> gainLimiter;
            cowbell -> gainLimiter;
            crash -> gainLimiter;
            claves -> gainLimiter;
            bongos -> gainLimiter;
            sideStick -> gainLimiter;

            // Output the result.
            gainLimiter -> out;
        }
    }
}
